@page "/"

@using System.Timers

<h1>Animal Matching Game</h1>
<h3>Finn to og to like dyr på kortest mulig tid!</h3>

<style>
    .container {
        width: 400px;
    }
    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>
<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++){
                var animal = shuffledAnimals[animalNumber];
                var uniqueDescription = $"Button #{animalNumber}";
                <div class="col-3">
                    <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                            type="button" class="btn btn-outline-dark">
                        <h1>@animal</h1>
                    </button>
                </div>
            }
    </div>
    <div class="row">
        <h2>Par funnet: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Tid: @timeDisplay</h2>
    </div>

</div>

@code {

        List<string> animalEmoji = new List<string>()
        {
            "🐶", "🐶",
            "🐭", "🐭",
            "🐼","🐼",
            "🐯","🐯",
            "🦄","🦄",
            "🐞","🐞",
            "🐌","🐌",
            "🦑","🦑",
        };

        List<string> shuffledAnimals = new List<string>();
        int matchesFound = 0;
        Timer timer;
        int tenthsOfSecondsElapsed = 0;
        string timeDisplay;


    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }
    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .ToList();
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            //Frste klikk - husk dette
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            timer.Start();
        }
        else if (lastAnimalFound == animal && animalDescription != lastDescription)
        {
            //Match funnet! Resetter for neste par.
            lastAnimalFound = string.Empty;

            // erstatt funnede dyr med tom string for å gjemme dem
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();
            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Spille igjen?";

                SetUpGame();
            }
        }
        else
        {
            // Brukeren har valgt forskjellige dyr
            // Resetter 
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e) {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }

    }